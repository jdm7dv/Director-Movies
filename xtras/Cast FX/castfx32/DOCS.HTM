<HTML>
<HEAD>
<TITLE>CastEffects Xtra - About CastEffects</TITLE>
<meta http-equiv="Content-Type" content="text/html; charset=">
</HEAD>

<BODY BGCOLOR="#FFFFFF" text="#000099">
<table border="0" width="600" align="LEFT" cellpadding="0" cellspacing="0" vspace="0" hspace="0">
  <tr> 
    <th align="LEFT" valign="TOP"><font face="Arial, Helvetica, sans-serif" size="6">Penworks<br>
      Corporation </font></th>
    <td colspan="2" valign="TOP" align="LEFT"> 
      <p align="RIGHT"><font face="Arial, Helvetica, sans-serif" size="6">CastEffects<br>
        v2.6</font> </p>
    </td>
  </tr>
  <tr> 
    <td align="LEFT" valign="TOP" colspan="3">
      <div align="CENTER">
        <font face="Arial, Helvetica, sans-serif"><a href="http://www.penworks.com">www.penworks.com</a></font><br>    
      </div>
    </td>
  </tr>
  <tr> 
    <td align="LEFT" valign="TOP" colspan="3"> 
      <p align="CENTER"><font face="Arial, Helvetica, sans-serif" size="2"><br>
        CastEffects v2.6 <br>
        <font size="1">Available for</font><br>
        Windows 32-bit (for Win '95/NT)<br>
        Windows 16-bit (Win 3.x)<br>
        Macintosh </font></p>
      <p align="CENTER"><a href="#information"><font face="Arial, Helvetica, sans-serif" size="2">General 
        Info</font></a> • <font face="Arial, Helvetica, sans-serif" size="2"> 
        <a href="#registration">About Ordering</a> • <a href="#instructions">Instructions</a> 
        <br>
        <a href="#usage" target="">Documentation</a> • </font><font face="Arial, Helvetica, sans-serif" size="2"> 
        <a href="#troubleshooting">Troubleshooting</a> </font></p>
      <p align="CENTER"><font face="Arial, Helvetica, sans-serif" size="2"><a href="order.cgi">Order</a> 
        • <a href="download.cgi">Download</a></font> </p>
      <p>&nbsp;</p>
      <p>&nbsp;</p>
      <p>&nbsp;</p>
      <p><br>
      </p>
      <h2> 
        <center>
          <a name="information">Information</a> 
        </center>
      </h2>
      <center>
        <p>&nbsp;</p>
      </center>
      <p>Originally developed as an Xtra to flip and extract images, CastEffects 
        has evolved into a powerful bitmap manipulation tool for Director at runtime. 
      </p>
      <p>CastEffects has the ability to:</p>
      <blockquote> 
        <p>• Extract subimages<br>
          • Vertically or horizontally flip images<br>
          • Create new bitmaps and draw into them<br>
          • Transform depths and palettes of images<br>
          • Create, add or exclude castlibs at runtime<br>
          • Composite bitmaps or text onto other bitmaps<br>
          • Allows composites with transparencies<br>
          • Composite by embedded alpha channels<br>
          • Alpha composites with a single alpha value<br>
          • Alpha composites with separate alpha mask<br>
          • Individual color channel extraction to bitmaps<br>
          • Color channel scaling or exact setting<br>
          • Replace individual colors with other colors<br>
          • Apply masking to most functions for great effects!<br>
          • Use chroma ranging for color ranges<br>
          • Stretch bitmaps vertically or horizontally<br>
          • Scale bitmaps up or down in size<br>
          • Get or set individual bitmap pixel colors<br>
          • Support images from 8-bit to 32-bit color<br>
          • Attach or return external media handles</p>
      </blockquote>
      <p>All on-the-fly from Lingo at runtime!<br>
      </p>
      <p>Between these areas of functionality, CastEffects is very powerful. By 
        creating the new images as castmembers you can then proceed to manipulate 
        them as sprites, apply masks or inks, or do anything else you might normally 
        do with bitmapped images. CastEffects gives you all the power while taking 
        away none of the functionality. </p>
      <p> 
      <p> 
        <center>
          <b>How can I try it?</b> 
        </center>
        CastEffects is fully functional in authoring mode - just give it a try! 
        You must license it, though, in order to run it in a projector. 
      <p> When you decide to register CastEffects, we'll send you a serial number 
        that allows you to use it in an unlimited number of projectors on any 
        and all platforms that we support. 
      <p> 
      <p> 
      <h2> 
        <center>
          <b><a name="registration">Registration</a></b> 
        </center>
      </h2>
      As mentioned, if you want to use CastEffects, you need to register it first 
      in order to get your serial number. 
      <p> You can do so by <b><a href="http://www.penworks.com/xtras/castfx/order.cgi" target="">clicking 
        here</a></b> providing your credit card number if you're so inclined. 
        Or, if you'd prefer the airwaves, fax it to us (<a href="orderfrm.txt">with 
        this</a>) at 1-800-PW-FAXNUm (1-800-793-2968) or +1 603-968-3361 for you 
        international folks. 
      <p> We'll send you a serial number that allows you to use CastEffects in 
        your applications. 
      <p> 
      <p> 
      <p> 
        <center>
          <b>What about tech support?</b> 
        </center>
        Our email address for tech support questions is <a href="mailto:techsupport@penworks.com">techsupport@penworks.com</a> 
      <p> Before you email, though, <i>please</i> check for more <a href="http://www.penworks.com/xtras/castfx/download.cgi" target="">current 
        versions</a>! 
      <p> If we fix a bug, we'll post the corrected version of the software, and 
        an info sheet describing what was fixed. It's entirely possible you can 
        have a fixed version just by downloading it! If we have your email address, 
        we'll notify you of an update. If you change your email address, be sure 
        to let us know! 
      <p> 
      <p> 
        <center>
          <b><a href="order.cgi" target="">Click here to order!</a></b> 
        </center>
      <p> 
        <center>
          <b>Revisions</b> 
        </center>
        You can always get the <a href="http://www.penworks.com/xtras/castfx/download.cgi" target="">current 
        version</a> of CastEffects here on our web site at <a href="http://www.penworks.com">http://www.penworks.com</a>. 
      <p> If you are a registered user, your serial number will work with all 
        future revisions of the xtra within the same major number. For instance, 
        if you registered for version 1.0, you'll be okay for 1.01, 1.2, 1.x, 
        see? Now, if we do a substantial functional upgrade, to, say 2.0, that'd 
        be a different product, but we'll make it affordable for you to do the 
        upgrade. 
      <p> 
      <p> 
        <center>
          <b>Feedback</b> 
        </center>
        Let us know if you liked it, give us compliments or suggestions! <a href="mailto:feedback@penworks.com">feedback@penworks.com</a> 
      <p> 
      <p> 
        <center>
          <b>Who are we?</b> 
        </center>
        Penworks Corporation is a multimedia development company specializing 
        in all sorts of fun things. We do enhanced CDs, children's educational 
        software, Shockwave and web stuff and, of course, <a href="http://www.penworks.com/custom.cgi">custom 
        and commercial Xtras</a>! If you need some feature you don't see here, 
        <a href="mailto:admin@penworks.com">let us know</a>! 
      <p> We also publish the <a href="http://www.penworks.com/LUJ/index.cgi" target="">Lingo 
        User's Journal</a>, the only monthly publication dedicated to Lingo and 
        Xobject/Xtra programming. With articles for beginners, intermediates, 
        and advanced users, it's easy to understand why developers in over fifty 
        countries turn to the Lingo User's Journal as their best technical resource! 
        More info on this <a href="http://www.penworks.com/LUJ/index.cgi" target="">by 
        clicking here</a> or by mailing <a href="mailto:luj@penworks.com" target="">luj@penworks.com</a> 
      <p> CastEffects is a trademark of Penworks Corporation. All other trademarks 
        or registered trademarks are the property of their respective owners. 
      <p> 
      <center>
        <p>&nbsp; 
        <p> 
      </center>
      <h2> 
        <center>
          <a name="instructions">Instructions</a> 
        </center>
      </h2>
      <p> 
        <center>
          <b>Installation (for authoring mode)</b> 
        </center>
        Place the appropriate Xtra in the Xtras directory under the appropriate 
        Macromedia Director directory. 
      <p> For instance, the 16-bit Windows Xtra (used for Win 3.x) goes in the 
        DIR516\XTRAS subdirectory for Director 5, or in the Xtras folder under 
        Director 6 for Director 6. 
      <p> For instance, the 16-bit Windows Xtra (used for Win 3.x) goes in the 
        DIR516\XTRAS subdirectory or the Xtras16 folder under Director 6. At runtime 
        it goes in the Xtras subfolder under the projector. 
      <p> The Mac Xtra goes in the Xtras folder under Director. 
      <p> 
      <p> 
        <center>
          <b>Installation (for projectors)</b> 
        </center>
        The Xtras go in a subdirectory/subfolder called Xtras under whatever directory/folder 
        you have the projector itself in. Don't forget that if you update the 
        Xtra that you need to update it in the projector Xtras folders as well! 
      <p><a name="whichDoIneed"> 
        <center>
          <b>Which platform do I need again?</b> 
        </center>
        </a> There's a difference between platforms, and it's true no matter whose 
        Xtra you use (not just ours). 
      <p> On the Mac, choose the Macintosh Xtra. 
      <p> On Windows, things are a little different. You have to understand that 
        there are two different versions of Windows code. There is 16-bit code, 
        which is the older style, used by Win 3.1x programs and also honored by 
        Win95, although it's not the preferred one for Win95. If you're using 
        the Windows 3.1 version of Director (regardless of operating system), 
        it will want the .X16 platform version. 
      <p> If you're using the Windows '95 authoring version of Director, you'll 
        need the 32-bit Xtra (.X32) in DIR532\XTRAS or Director 6\Xtras 
      <p> Now, that's authoring mode. Projectors are something else. Regardless 
        of which Windows authoring environment you used, you have the option to 
        choose the platform your projector will run on. If you choose Win 3.1, 
        then you need to distribute the .X16 xtra (you must register first to 
        use it in a projector). If you choose a Win95 projector, you need to distribute 
        the .X32 xtra. These go in an Xtras subdirectory under the directory where 
        the projector resides. Again, this is true no matter whose Xtras you're 
        using. 
      <p> If you're authoring a commercial product, you'll probably at least want 
        to distribute a 16-bit projector, since it'll run on the most user machines. 
      <p> 
        <center>
          <b>Will it work in Shockwave?</b> 
        </center>
        As far as we know. The problem with using any Xtras under Shockwave is 
        that the user must first download the Xtra appropriate to their plugin, 
        and then put it in the proper directory on their machine. This is a lot 
        to ask of a user who wants to visit your web page, so unless you have 
        a really compelling web page, you probably won't be asking your user to 
        download any xtras. Of course, Macromedia may change this arrangement 
        in the future, but that's the way it is right now. 
      <p> It's actually for a good reason. If it didn't work this way, some malicious 
        person could make a renegade xtra to wreak havoc on your hard disk, and 
        then you could have big problems simply by *visiting* their Shocked page. 
        No doubt this wouldn't go over well, so that's why Macromedia restricted 
        Shockwave the way they did. 
      <p>&nbsp; 
      <hr>
      <center>
        <h2><a name="usage"></a>USAGE</h2>
      </center>
      <blockquote> 
        <blockquote> 
          <center>
            <div align="LEFT">
              <p><a href="#GeneralTheory">General Theory</a><br>
                <a href="#FunctionReference">Function Reference</a> </p>
              <p>&nbsp;</p>
              <p>&nbsp;</p>
              <p>&nbsp; </p>
            </div>
          </center>
        </blockquote>
      </blockquote>
      <center>
        <p><b><a name="GeneralTheory"></a>General Theory</b> </p>
      </center>
      CastEffects works by taking an existing bitmap image that you've already 
      imported into Director and then making a variation of it and telling you 
      where it put the new castmember. Likewise it can create bitmaps on the fly 
      and allow you to draw into them. 
      <p> For instance, one variation is that it can pull out a chunk of the image. 
        You can ask CastEffects to extract a certain region of that image. CastEffects 
        would then create a castmember with that variation in it and give you 
        back the location of the new castmember. You can then attach that member 
        to a sprite and move it around or do whatever you want to it. 
      <p> Because it's a castmember, you can also apply inks to it, or otherwise 
        treat it like any other bitmap castmember. It <i>is</i> a regular bitmap 
        castmember. 
      <p> One consideration is that every time you flip or rotate or extract an 
        image, CastEffects would be creating a new member. Five flips - five new 
        cast members. If you don't need multiple copies, this could quickly grow 
        to be a problem. 
      <p> CastEffects solves this problem in two steps. First, it creates its 
        own temporary internal cast, which is deleted when you shut down CastEffects. 
        The second step is up to you. On all the CastEffects functions (when appropriate) 
        you have the ability to specify a castmember to replace with the new one. 
        What this means is that you can keep reusing the same cast slot over and 
        over, so you don't get a build-up of unneeded cast members. 
      <p> For instance, if you were rotating an image, the first time through 
        you would be given the location of the new, rotated, castmember. You can 
        assign it to a sprite if you wish. The next time you rotate, if you provide 
        the location of the existing member, it will be replaced with the new 
        member. This way there's only one version of the rotated castmember in 
        existence. 
      <p> Intelligent use of the replacement ability will keep CastEffects' internal 
        cast from getting cluttered. Still, it's nice not to get your code too 
        littered with attempts to keep track of everything. For that reason CastEffects 
        also provides release functions to release specific castmembers or even 
        all the castmembers it has created in its internal cast. 
      <p> These are handy if, for instance, you make a series of variations of 
        an image (say, 16 tiles) that you use. You need to keep them all around 
        for the duration, but when you're done you can use the function to release 
        all the CastEffects castmembers. They will be deleted and the slate will 
        be clean. 
      <p> It is also possible to specify that the new castmember be placed into 
        one of your own casts, if you prefer. 
      <p> CastEffects also lets you draw into bitmaps. You can get the color of 
        a pixel at any time, but you can also set the pixels in a bitmap. To do 
        so, you "start a drawing session", then continue to set pixels until you 
        save the session. You can also draw filled or unfilled rectangles, squares, 
        circles, ellipses, and lines. 
      <p> 
      <p> 
        <center>
          <b>Getting Started</b> 
        </center>
        Before you can make use of any of the CastEffects functions, you'll need 
        to prepare, or initialize, CastEffects. You can do this by using the castFX_init() 
        function. This needs to be called only once, at the beginning of your 
        program. A good place for this is in the startMovie handler (which needs 
        to be in a movie script, remember). 
      <pre>
on startMovie
  -- Do your other stuff

  castFX_init()

end
</pre>
      <br>
      Now you're ready to go! <br>
      Note: if you're interested, the init function returns the number of the 
      castLib it created. For instance: 
      <pre>  set cfxLib =castFX_Init()

would return the number of the CastEffects castlib. This is not required 
      for you, but available if you need it. 
      </pre>
      <p> 
      <p> 
        <center>
          <b> Getting Finished </b> 
        </center>
        When you're all done with CastEffects, you need to shut it down so it 
        can release its internal storage areas. You can do this by using the castFX_shutdown() 
        function. This needs to be called only once, at the end of your program. 
        A good place for this is in the stopMovie handler (which needs to be in 
        a movie script, remember). 
      <pre>
on stopMovie
  -- Do your other stuff

  castFX_shutdown()

end
</pre>
      <p>Now you're all done! </p>
      <p>&nbsp;</p>
      <hr>
      <p>&nbsp;</p>
      <h2><a name="FunctionReference"></a>Function Reference</h2>
      <blockquote> 
        <p><a href="#AboutSpecs"> </a><a href="#Administrative">Administrative</a> 
          <br>
          <a href="#CastManagement">Cast Management</a><br>
          <a href="#ImageManipulation">Image Manipulation</a><br>
          <a href="#Compositing">Compositing</a><br>
          <a href="#Modifiers">Modifiers</a><br>
          <a href="#Drawing" target="">Drawing Functions</a><br>
          <a href="#Miscellaneous">Miscellaneous</a><br>
          <a href="#Appendix">Appendix</a><br>
          <a href="#AboutSpecs">About function specifications</a> </p>
        <p>&nbsp;</p>
      </blockquote>
      <p> 
      <hr>
      <p> 
      <h3> <a name="Administrative">Administrative</a></h3>
      <blockquote> 
        <blockquote> 
          <p><a href="#castFX_init">castFX_init()</a><br>
            <a href="#castFX_shutdown">castFX_shutdown()</a><br>
            <a href="#castFX_error">castFX_error()</a><br>
            <a href="#castFX_release">castFX_release()</a><br>
            <a href="#castFX_releaseAll">castFX_releaseAll()</a><br>
            <a href="#castFX_version">castFX_version()</a><br>
            <a href="#castFX_about">castFX_about()</a> </p>
        </blockquote>
      </blockquote>
      <p>&nbsp; </p>
      <p><a name="castFX_init"></a><b>castFX_init()</b><br>
        Initializes castEffects. Call before using most other functions. Creates 
        a temporary castlib, which is removed upon <a href="#castfx_shutdown">shutdown</a>.<br>
        <br>
        <a name="castFX_shutdown"></a><b>castFX_shutdown()</b><br>
        Shuts down castEffects. Removes the temporary castlib.<br>
        <br>
        <a name="castFX_error"></a><b>castFX_error()</b><br>
        Returns error from last call. Error codes are <a href="#ErrorCodes">listed 
        here</a>.<br>
        <br>
        <a name="castFX_release"></a><b>castFX_release()</b><br>
        Releases a castFX cast member (deletes it out of the temporary cast).<br>
        <br>
        <a name="castFX_releaseAll"></a><b>castFX_releaseAll()</b><br>
        Releases all castFX cast members in the temporary cast.<br>
        <br>
        <a name="castFX_version"></a><b>castFX_version()</b><br>
        Returns current version of CastEffects.<br>
        <br>
        <a name="castFX_about"></a><b>castFX_about()</b><br>
        Returns about information in string. 
      <p>&nbsp; 
      <hr>
      <h3> <a name="CastManagement">Cast Management</a> </h3>
      <blockquote> 
        <blockquote> 
          <p><a href="#CreateCast">CreateCast()</a><br>
            <a href="#IncludeCast">IncludeCast()</a><br>
            <a href="#ExcludeCast">ExcludeCast()</a> </p>
        </blockquote>
      </blockquote>
      <p>&nbsp; 
      <p> <a name="CreateCast"></a><b>CreateCast(name, #internal | #external)</b><br>
        Creates a new cast, returns cast index. To save cast, use Lingo's 'save 
        castlib' command.<br>
        <br>
        <a name="IncludeCast"></a><b>IncludeCast(name, path)</b><br>
        Loads an external cast file to the movie. Returns cast index.<br>
        <br>
        <a name="ExcludeCast"></a><b>ExcludeCast(castlib)</b><br>
        Removes the specified cast from the movie. 
      <p>&nbsp; 
      <hr>
      <h3> <a name="ImageManipulation">Image Manipulation</a> </h3>
      <blockquote> 
        <blockquote> 
          <p><a href="#Extract">Extract()</a><br>
            <a href="#Viewport">Viewport()</a><br>
            <a href="#ReplaceColor">ReplaceColor()</a><br>
            <a href="#ReplaceAllColorsExcept">ReplaceAllColorsExcept()</a><br>
            <a href="#Rotate90">Rotate90()</a><br>
            <a href="#Rotate">Rotate()</a><br>
            <a href="#FlipHorz">FlipHorz()</a><br>
            <a href="#FlipVert">FlipVert()</a><br>
            <a href="#Stretch">Stretch()</a><br>
            <a href="#Scale">Scale()</a> <br>
            <a href="#TransformBitmap">TransformBitmap()</a><br>
            <a href="#AdjustChannels">AdjustChannels()</a> <br>
            <a href="#ExtractChannel">ExtractChannel()</a> </p>
        </blockquote>
      </blockquote>
      <p>&nbsp; 
      <p> <a name="Extract"></a><b>Extract(member, rect [, <a href="#newMember">newMember</a>])</b><br>
        Extracts a rectangular image from a cast member. Returns new member location. 
        Honors <a href="#modifiers">masking.</a><br>
        <br>
        <a name="Viewport"></a><b>Viewport(member, rect [, <a href="#newMember">newMember]</a>)</b><br>
        Sets viewport on a cast. Obsolete. Use Extract function instead.<br>
        <br>
        <a name="ReplaceColor"></a><b>ReplaceColor(member, <a href="#color">oldColor</a>, 
        <a href="#color">newColor</a> [, limitRect [, <a href="#newMember">newMember]</a>])</b><br>
        Replaces a color in member with new color. If rect is specified, will 
        limit replacements just to that region. Returns new member location. Honors 
        <a href="#modifiers">masking and chroma ranges</a>.<br>
        <br>
        <a name="ReplaceAllColorsExcept"></a><b>ReplaceAllColorsExcept(member, 
        <a href="#color">exceptColor</a>, <a href="#color">newColor</a> [, limitRect 
        [, <a href="#newMember">newMember</a>]])</b><br>
        Replaces all colors except specified except color with new color. If rect 
        is specified, will limit replacements just to that region. Returns new 
        member location. Honors <a href="#modifiers">masking<br>
        and chroma ranges</a>.<br>
        <br>
        <a name="Rotate90"></a><b>Rotate90(member, numRotations [, <a href="#newMember">newMember</a>])</b><br>
        Rotates a castmember in 90 deg increments. This is the old 'rotate' from 
        version 1. Returns new member location.<br>
        <br>
        <a name="Rotate"></a><b>Rotate(member, degrees [, <a href="#newMember">newMember</a>])</b><br>
        Rotates a castmember by any degree increment. Returns new member location.<br>
        <br>
        <a name="FlipHorz"></a><b>FlipHorz(member [, <a href="#newMember">newMember</a>])</b><br>
        Flips a castmember horizontally. Returns new member location.<br>
        <br>
        <a name="FlipVert"></a><b>FlipVert(member [, <a href="#newMember">newMember</a>])</b><br>
        Flips a cast vertically. Returns new member location. <br>
        <br>
        <a name="Stretch"></a><b>Stretch(member, width, height [, <a href="#newMember">newMember</a>])</b><br>
        Stretches member to new width, height. Returns new member location.<br>
        <br>
        <a name="Scale"></a><b>Scale(member, scaleFactor [, <a href="#newMember">newMember</a>])</b><br>
        Scales member by scale factor (e.g., 2 doubles it, .5 halves it). Returns 
        new member location.<br>
        <br>
        <a name="TransformBitmap"></a><b>TransformBitmap(member, newDepth [, palette 
        [, #dither | #remap]][, <a href="#newMember">newMember</a>])</b><br>
        Transforms the bitmap to the new depth. If depth is under 8 bits, accepts 
        a palette specification and flag symbol to remap or dither. Returns new 
        member location. 
      <p> <a name="AdjustChannels"></a><b>AdjustChannels(member, rect, red, green, 
        blue[, <a href="#newMember">newMember</a>])</b><br>
        Adjusts the channels in the bitmap. Not valid for paletted images (8-bit 
        (256-color)) or lower. The rect specifies the rectangular area to adjust. 
        Red, Green, and Blue can be either an integer for exact value (from 0-255), 
        which will set all pixels in that channel to that value, or they can be 
        a floating-point number to represent a multiple of the existing value. 
        For instance, an integer value of 0 in a channel turns off that channel. 
        A floating point value of 1.0 keeps it the same (multplies by 1.0). A 
        floating point value of 0.5 halves the existing value. You can intermix 
        the values. For instance, 0, 1.0, 0 would set red and blue channels to 
        0 (disabled), but keep green active (multply by 1.0), effectively showing 
        just the green channel. Honors <a href="#modifiers">masking</a>.
      <p>
      <p> <a name="ExtractChannel"></a><b>ExtractChannel(member, channel, rect[, 
        <a href="#newMember">newMember</a>])</b><br>
        Extracts the specified channel into a separate bitmap. Not valid for paletted 
        images (8-bit (256-color)) or lower. The channel is specified by one of 
        the symbols #red, #green, #blue, or #alpha. Note that #alpha is only available 
        on true 32-bit images and that Director 6.x and earlier stores only 24-bit 
        images even if it identifies the image as 32-bit in the paint window and 
        with the depth property.The rect specifies the rectangular area to extract. 
        Honors <a href="#modifiers">masking</a>. 
      <p> 
      <p> 
      <p>&nbsp; 
      <hr>
      <p><a name="Drawing">Drawing Functions</a> 
      <blockquote> 
        <blockquote> 
          <p><a href="#NewDrawing" target="">NewDrawing()</a><br>
            <a href="#PrepareDrawing">PrepareDrawing()</a><br>
            <a href="#SaveDrawing">SaveDrawing()</a><br>
            <a href="#CancelDrawing">CancelDrawing()</a><br>
            <a href="#SetPixel">SetPixel()</a><br>
            <a href="#SetLineThick">SetLineThick()</a><br>
            <a href="#DrawLine">DrawLine()</a><br>
            <a href="#DrawRect">DrawRect()</a><br>
            <a href="#DrawFilledRect">DrawFilledRect()</a><br>
            <a href="#DrawCircle">DrawCircle()</a><br>
            <a href="#DrawFilledCircle">DrawFilledCircle()</a><br>
            <a href="#DrawEllipse">DrawEllipse()</a><br>
            <a href="#DrawFilledEllipse">DrawFilledEllipse()</a><br>
            <a href="#DrawPoly">DrawPoly()</a><br>
            <a href="#DrawFilledPoly">DrawFilledPoly()</a> <br>
            <br>
          </p>
        </blockquote>
      </blockquote>
      <p>&nbsp; 
      <p><a name="NewDrawing"></a><b>NewDrawing(member, width, height, depth [, 
        palette])</b><br>
        Creates a new drawing in depths of 8-bits or higher. You must specify 
        the member into which to draw. If needed, use Lingo's new function to 
        do so: set newMem =new(#bitmap). To draw to an existing member, use <a href="#prepareDrawing">PrepareDrawing</a> 
        instead. If the depth is 8 bits, then you must provide a palette, either 
        by symbol (#SystemWin) or by member reference to a custom palette.<br>
        <br>
        <a name="PrepareDrawing"></a><b>PrepareDrawing(member)</b><br>
        Prepares to draw to bitmap directly. Use this to draw onto an existing 
        castmember.<br>
        <br>
        <a name="SaveDrawing"></a><b>SaveDrawing()</b><br>
        Saves drawing. Drawing will be saved in member location specified when 
        you created or opened the drawing.<br>
        <br>
        <a name="CancelDrawing"></a><b>CancelDrawing()</b><br>
        Cancels drawing. Any changes are discarded.<br>
        <br>
        <a name="SetPixel"></a><b>SetPixel(point(xLoc, yLoc), newValue)</b><br>
        Sets pixel at specified location in an open drawing.<br>
        See also: <a href="#GetPixel">GetPixel</a><br>
        <br>
        <a name="SetLineThick"></a><b>SetLineThick(integer)</b><br>
        Set the thickness of drawing lines, from 1 to n.<br>
        <br>
        <a name="DrawLine"></a><b>DrawLine(point(x,y), point(x,y), <a href="#color">color</a>)</b><br>
        Draw a line from point to point in specified color.<br>
        <br>
        <a name="DrawRect"></a><b>DrawRect(rect(x1,y1,x2,y2), <a href="#color">color</a>)</b><br>
        Draws a rectangle in specified color.<br>
        <br>
        <a name="DrawFilledRect"></a><b>DrawFilledRect(rect(x1,y1,x2,y2), <a href="#color">color</a>)</b><br>
        Draws a filled rectangle in specified color.<br>
        <br>
        <a name="DrawCircle"></a><b>DrawCircle(point(x,y), radius, <a href="#color">color</a>)</b><br>
        Draws a circle from point with radius in specified color.<br>
        <br>
        <a name="DrawFilledCircle"></a><b>DrawFilledCircle(point(x,y), radius, 
        <a href="#color">color</a>)</b><br>
        Draws a filled circle from point with radius in specified color.<br>
        <br>
        <a name="DrawEllipse"></a><b>DrawEllipse(point(x,y), XRadius, YRadius, 
        <a href="#color">color</a>)</b><br>
        Draws an ellipse from point with given X and Y radii in specified color.<br>
        <br>
        <a name="DrawFilledEllipse"></a><b>DrawFilledEllipse(point(x,y), XRadius, 
        YRadius, <a href="#color">color</a>)</b><br>
        Draws a filled ellipse from point with given X and Y radii in specified 
        color.<br>
        <br>
        <a name="DrawPoly"></a><b>DrawPoly([point(x,y),...], <a href="#color">color</a>)</b><br>
        Draws a polygon from the list of points in specified color.<br>
        <br>
        <a name="DrawFilledPoly"></a><b>DrawFilledPoly([point(x,y),...], <a href="#color">color</a>)</b><br>
        Draws a filled polygon from the list of points in specified color. 
      <p>&nbsp;</p>
      <hr>
      <h3> <a name="Modifiers">Modifiers</a> </h3>
      <blockquote> 
        <blockquote> 
          <p><a href="#SetChromaRange">SetChromaRange()</a><br>
            <a href="#SetChromaRangeDirect">SetChromaRangeDirect()</a><br>
            <a href="#CancelChromaRange">CancelChromaRange()</a><br>
            <a href="#SetMask">SetMask()</a><br>
            <a href="#CancelMask">CancelMask()</a> </p>
        </blockquote>
      </blockquote>
      <p> <a name="SetChromaRange"></a><b>SetChromaRange(integer)</b><br>
        Sets Chroma Range by percent 0 - 100. The chroma range specifies how much 
        deviation is allowed from the source color during transparency and color 
        replacement functions. A range of 0 allows for no deviation and is the 
        same as <a href="#CancelChromaRange">CancelChromaRange</a>.<br>
        <br>
        <a name="SetChromaRangeDirect"></a><b>SetChromaRangeDirect(integer)</b><br>
        Sets Chroma Range directly 0 - 442. Allows more precise control. The chroma 
        range specifies how much deviation is allowed from the source color during 
        transparency and color replacement functions. A range of 0 allows for 
        no deviation and is the same as <a href="#CancelChromaRange">CancelChromaRange</a>.<br>
        <br>
        <a name="CancelChromaRange"></a><b>CancelChromaRange()</b><br>
        Cancels the chroma range. All color specifications will be treated exactly.<br>
        <br>
        <a name="SetMask"></a><b>SetMask(member)</b><br>
        Sets a mask which defines the workarea for color replacement, extraction, 
        or other similar operations. The mask must be an 8-bit image. Non-white 
        areas will be considered the masked work area. Providing 0 is same as 
        using <a href="#CancelMask">CancelMask</a>. <br>
        <br>
        <a name="CancelMask"></a><b>CancelMask()</b><br>
        Cancels use of masking 
      <p>&nbsp; 
      <hr>
      <h3> <a name="Compositing">Compositing</a> </h3>
      <blockquote> 
        <blockquote> 
          <p><a href="#Composite">Composite()</a><br>
            <a href="#CompositeTransparent">CompositeTransparent()</a> <br>
            <a href="#CompositeAlpha">CompositeAlpha()</a> </p>
        </blockquote>
      </blockquote>
      <p> <a name="Composite"></a><b>Composite(baseMember, overlayMember, point(x,y) 
        [, <a href="#newMember">newMember</a>])</b><br>
        Places one image on top of another positioned at specified point. Returns 
        new member location. Honors <a href="#modifiers">masking</a>.<br>
        <br>
        <a name="CompositeTransparent"></a><b>CompositeTransparent(baseMember, 
        overlayMember, point(x,y), <a href="#color">transparentColor</a> [, <a href="#newMember">newMember</a>])</b><br>
        Places one image on top of another at specified point with a certain color 
        transparent. Returns new member location. Honors <a href="#modifiers">masking 
        and chroma ranging</a>. 
      <p> <a name="CompositeAlpha"></a><b>One of the following:<br>
        CompositeAlpha(baseMember, overlayMember, point(x,y) [, <a href="#newMember">newMember</a>])<br>
        CompositeAlpha(baseMember, overlayMember, point(x,y) , AlphaLevel [, <a href="#newMember">newMember</a>])<br>
        CompositeAlpha(baseMember, overlayMember, point(x,y), AlphaMember, point(x,y) 
        [, <a href="#newMember">newMember</a>]) </b><br>
        Places one image on top of another at specified point composited with 
        respect to Alpha levels. Honors <a href="#modifiers">masking</a>. 
      <p> The first call form uses the internal Alpha channel of the image. The 
        image must be a 32-bit image. Note that on Windows in Director 6.x or 
        earlier, that even if the paint window says 32-bit, and the depth of member 
        says 32-bit, it is still stored internally as 24-bit, so no internal Alpha 
        channels are available.
      <p>The second call form takes an Alpha Level from 0 to 255 to apply to the 
        whole composite. Using 255 is the equivalent of a regular composite. Using 
        0 is the equivalent of not doing anything to merge the images.
      <p>The third call form references a separate 8-bit image as the Alpha mask 
        starting at the second point given (the point indicates where in the mask 
        to start using the mask).<br
      
      <p>&nbsp; 
      <hr>
      <h3> <a name="Miscellaneous">Miscellaneous</a> </h3>
      <blockquote> 
        <blockquote> 
          <p><a href="#GetPixel">GetPixel()</a><br>
            <a href="#GetMedia">GetMedia()</a><br>
            <a href="#AttachMedia">AttachMedia()</a><br>
            <a href="#FreeMediaHandle">FreeMediaHandle() </a></p>
        </blockquote>
      </blockquote>
      <p>&nbsp; 
      <p><a name="GetPixel"></a><b>GetPixel([member,] point(xLoc, yLoc))</b><br>
        Returns <a href="#color">pixel color</a> at specified location in bitmap 
        member. If bitmap member is not specified, the currently open drawing 
        member will be used, if any. By using <a href="#PrepareDrawing">PrepareDrawing()</a> 
        you can prepare a bitmap for multiple GetPixel calls with minimal overhead. 
        Make sure to call <a href="#CancelDrawing">CancelDrawing()</a> when done.
      <p><a name="GetMedia"></a><b>GetMedia(member)</b><br>
        Returns the media handle for the specified member. Member is expected 
        to be a bitmap image or a text/field. If a text/field, a conversion is 
        made to a bitmap and the handle to that bitmap is returned. On Windows 
        this is a HANDLE to a DIB (BITMAPINFOHEADER). On the Mac, this is a PicHandle. 
        You then become the owner of the handle and are responsible for freeing 
        it when done. You may use CastEffects' <a href="#FreeMediaHandle">FreeMediaHandle()</a> 
        if you wish, or GlobalFree() if on Windows or KillPicture() if on the 
        Mac.
      <p><a name="AttachMedia"></a><b>AttachMedia(member, handle)</b><br>
        Attaches the handle to the specified member. On Windows this is expected 
        to be a HANDLE to a DIB (BITMAPINFOHEADER). Do NOT supply a BITMAPFILEHEADER 
        directly (from a .BMP file), or a pointer. Make sure it is an unlocked 
        handle. On the Mac, provide a PicHandle
      <p>Director will assume ownership and the handle will be freed automatically 
        upon attaching to the specified member. .
      <p>
      <p><a name="FreeMediaHandle"></a><b>FreeMediaHandle(handle)</b><br>
        Frees the specified handle. This can be any globally allocated HANDLE 
        on Windows and must be a PicHandle on the Mac. Although CastEffects will 
        check to make sure the handle is not NULL, it will not check further to 
        see if it is valid. Freeing an invalid handle may crash the system. It 
        is not necessary to free handles after calling <a href="AttachMedia">AttachMedia()</a> 
        as ownership of those handles are automatically transferred to Director. 
        Use FreeMediaHandle() either as a convenience, or in the event of needing 
        to cancel some operation.
      <p>
      <p><br>
      <hr>
      <h3><a name="Appendix"></a>Appendix </h3>
      <blockquote> 
        <blockquote> 
          <p><a href="AboutSpecs">Understanding function specs</a><br>
            <a href="#NewMember" target="">About NewMember</a><br>
            <a href="#Color">Specifying or getting colors</a></p>
        </blockquote>
      </blockquote>
      <h4>&nbsp;</h4>
      <h4><a name="AboutSpecs"></a>Understanding Function Specs</h4>
      <p>Here are some symbols and references you may encounter in reading these 
        function specifications:</p>
      <p><b>[ ] Brackets around parameters</b><br>
        The brackets around parameters mean that what's enclosed is optional (or 
        may sometimes, but not always, be needed, depending on the function call). 
        The exception is where a list is called for, like a list of colors, or 
        a list of points.<br>
        It is possible to have nested brackets. In such cases, what is inside 
        the inner brackets can be specified if and only if the outer brackets 
        are used. This is most often the case with parameters at the end of a 
        function, where one or more parameters can be optional.</p>
      <p><b>... Ellipses</b><br>
        Means that one or more items can repeat, just as in a list of point(x,y) 
        values. </p>
      <p><b>member</b><br>
        Means the member specification of the castmember. For instance:<br>
        member "myimage"<br>
        or<br>
        member 3 of castlib 2</p>
      <p><b>color</b><br>
        Means a color specification, either an RGB list or a pixel index. <a href="#color">Click 
        here for more info</a>.</p>
      <p><b>newMember</b><br>
        Means an optional member to create or replace, instead of one in the temporary 
        cast. <a href="#newMember">Click here for more info</a>.</p>
      <p><b>point(x, y)</b><br>
        A Lingo point, as in literally point(x,y) or point(34, 100)</p>
      <p><b>rect</b><br>
        A Lingo rect, as in literally rect(x1,y1,x2,y2), or rect(0,0,640,480)</p>
      <p> <b>| Vertical separator</b><br>
        Means one or another of the separated options. For instance, if the choice 
        is #dither | #remap, then either #dither or #remap is allowable, but not 
        both (unless so specified).</p>
      <p>&nbsp;</p>
      <h4><a name="NewMember"></a>About NewMember</h4>
      <p>CastEffects, upon <a href="#castfx_init">init</a>, creates a temporary 
        castlib into which it places all new bitmaps (as the result of, say, a 
        rotate), and it passes back from those functions the member specification 
        of the new member. For instance, a call to rotate(member "myHouse", 23), 
        might return 'member 3 of castlib 2', which means that the resulting rotated 
        image was placed in castlib 2 (the temporary cast in this instance).</p>
      <p>Since CastEffects is meant to be used primarily at runtime (in a projector), 
        this is a good scheme, because we don't have to worry as much about running 
        out of space in a permanent cast, and you can use the <a href="#castFX_release">release</a> 
        and <a href="#castFX_ReleaseAll">releaseAll</a> functions to free up all 
        your "manipulated images".</p>
      <p>However, there may be times when you want the result to go to a specific 
        location. For this reason, wherever appropriate, most functions accept, 
        as the last parameter, a member specification to write the result to. 
        This does not have to be a blank member - it could be the same as the 
        original member (which will overwrite/replace the original). The benefits 
        are that you can take an image through a series of transformations without 
        creating additional cast members. The drawback is that by replacing the 
        original you can't recover it.</p>
      <h4><a name="Color"></a>Specifying or getting colors</h4>
      <p> CastEffects supports bit depths from 8 to 32-bit (and in rare occasions, 
        like <a href="#transformBitmap">transformBitmap</a>, under 8 bits), but 
        colors in depths of 8 bits and under are mapped to palettes, whereas bitdepths 
        higher than 8 bits have no palettes, but instead are given as RGB specifications.</p>
      <p>Anywhere you need to provide a color specification, you must provide 
        it either as a palette index or as an RGB value, depending on the depth 
        of the member with which you are working. To give as an index for 8-bit, 
        provide a color number from 0 to 255, which will represent a color index 
        into the palette for that image. To give as an RGB value, give as a list 
        of three numbers, where the first is Red, the second Green, the third 
        Blue. For instance [0, 0, 255] would be pure blue (red and green are 0). 
        [255, 255, 255] would be pure white (red, green, and blue are maximum). 
        You cannot give an RGB value for an 8 bit image.</p>
      <p><br>
      </p>
      <p> 
      <p> 
      <p> 
      <p> 
      <p> 
      <center>
        <hr>
        <p> 
      </center>
      <h2> 
        <center>
          <a name="troubleshooting">Troubleshooting</a> 
        </center>
      </h2>
      <p> <i> Why doesn't CastEffects work? </i> 
      <blockquote> 
        <p> First, make sure you prepared CastEffects by calling castFX_Init() 
          at some point before your other calls.<br>
          <br>
          Second, if you find that certain calls are not working, use castFX_Error() 
          to see what CastEffects found wrong when it tried to handle your call. 
          The error codes are listed <a href="#errorCodes">at the bottom of this 
          file</a>. Note! In version 1, a call to castFX_Error() clears the error 
          when done.<br>
        </p>
      </blockquote>
      <p> <i> Why do I get a "handler not defined" on the CastEffects commands? 
        </i> 
      <blockquote> 
        <p>You probably don't have the CastEffects Xtra in your Xtras folder or 
          Directory. It needs to be there. Further, it needs to be the proper 
          version (.X16 for 16-bit authoring Director or projectors, .X32 for 
          32-bit authoring Director or projectors).</p>
        <p>If this only occurs in a projector, then you don't have the appropriate 
          Xtra in the Xtras folder under the projector.<br>
        </p>
        <p> <br>
        </p>
      </blockquote>
      <p> <i> </i></p>
      <p> <i> My call seems correct - why doesn't it work? </i> 
      <p> 
      <blockquote> 
        <p> Most commonly the problem is that CastEffects requires an existing 
          cast member to be provided to it, and that you have not provided a member 
          number. </p>
      </blockquote>
      <pre>
   For instance, one way is to omit the "member" word:

      set flippedImage =flipVert(23)

   It should be:

      set flippedImage =flipVert(member 23)

   or even

      set flippedImage =flipVert(member 23 of castlib 1)</pre>
      <blockquote> 
        <p> <br>
          The other way is to be specifying a sprite number instead of a cast 
          member. If you need to specify a number you need to first get the member 
          of that sprite, then you can use the member you got: </p>
      </blockquote>
      <pre>
      set flippedImage =flipVert(the member of sprite 14)
</pre>
      <blockquote> 
        <p> Finally, check for an error message. Use castFX_Error() to see if 
          there was a problem, then look up the number in our table at the end 
          of this document:<br>
        </p>
      </blockquote>
      <pre>
     if (castFX_Error()) then
       alert "Error " & castFX_Error() & "when doing xxxx"
     end if
</pre>
      <p> <i> Why do I get a "Script error: error" on commands? </i> 
      <p> 
      <blockquote> 
        <p> Lingo complains with a "script error" on what looks like a perfectly 
          fine command if you have referenced a castmember that does not exist. 
          For instance, rotate(member 139, 3) would cause such an error if member 
          139 did not exist.<br>
        </p>
      </blockquote>
      <p> <i> How do I get or set pixels at the edge of the bitmap? </i> 
      <p> 
      <blockquote> 
        <p> You can, but you have to remember where the edge really is. All image 
          coordinates in Director have (0,0) as the left top corner. That means 
          that a image that is 320x200 (320 wide, 200 tall) actually has coordinates 
          of (0,0) to (319, 200). The rightmost edge is 319, because the image 
          starts at 0 (the first pixel) and ends at 319 (the 320th pixel). It 
          may seem odd, but almost all computer screen environments work that 
          way today.<br>
        </p>
      </blockquote>
      <p> <i> I don't seem to be able to get or set the pixel color I want... 
        </i> 
      <p> 
      <blockquote> 
        <p> Remember that the palette color numbering starts at 0, so a 256-color 
          palette is really numbered 0 to 255. Numbers outside that range will 
          be ignored. Also, that means that if you want the fourth color in the 
          palette, you ask for color 3. Since the first color in palettes is 0, 
          they're all off by 1.<br>
        </p>
      </blockquote>
      <p><i>How's the speed?<br>
        </i></p>
      <blockquote> 
        <p> The speed of our image manipulations is actually very quick. Director 
          itself, however, takes a certain amount of time to replace the bitmaps 
          in the cast. This varies by machine, and normally isn't noticeable, 
          but if you make a lot of, say, extracts in a row, you might notice a 
          small delay on certain machines. This is due to something internal in 
          Director and it hopefully will be addressed in a future version of Director. 
          It does seem to be improved in Director 6.<br>
        </p>
      </blockquote>
      <p>&nbsp;</p>
      <hr>
      <p> 
      <i> 
      <center>
        <h3><a name="errorCodes"></a>Error Codes</h3>
      </center>
      </i> 
      <p> </p>
      <p><br>
        Possible castFX_Error() values are:</p>
      <table border="0" width="100%">
        <tr> 
          <td width="7%">0</td>
          <td width="93%"><font face="Arial, Helvetica, sans-serif" size="2">No 
            error occurred</font></td>
        </tr>
        <tr> 
          <td width="7%">1</td>
          <td width="93%"><font face="Arial, Helvetica, sans-serif" size="2">Not 
            ready, most likely initialization was not done</font></td>
        </tr>
        <tr> 
          <td width="7%">3</td>
          <td width="93%"><font face="Arial, Helvetica, sans-serif" size="2"> 
            Failed to get something. This could be due to either an inappropriate</font></td>
        </tr>
        <tr> 
          <td height="17" width="7%">4</td>
          <td height="17" width="93%"><font face="Arial, Helvetica, sans-serif" size="2">The 
            specified castmember is not a bitmap.</font></td>
        </tr>
        <tr> 
          <td width="7%">5</td>
          <td width="93%"><font face="Arial, Helvetica, sans-serif" size="2">The 
            internal cast is full.</font></td>
        </tr>
        <tr> 
          <td width="7%">6</td>
          <td width="93%"><font face="Arial, Helvetica, sans-serif" size="2">Failed 
            to create or set something</font></td>
        </tr>
        <tr> 
          <td width="7%">7</td>
          <td width="93%"><font face="Arial, Helvetica, sans-serif" size="2">Bad 
            arguments supplied - could be caused by not specifying a member<br>
            properly or otherwise not providing the right information in your 
            call.</font></td>
        </tr>
        <tr> 
          <td width="7%">8</td>
          <td width="93%"><font face="Arial, Helvetica, sans-serif" size="2">Too 
            many arguments supplied. For instance, did you remember to give<br>
            a rect() or did you just give four numbers instead?</font></td>
        </tr>
        <tr> 
          <td width="7%">9</td>
          <td width="93%"><font face="Arial, Helvetica, sans-serif" size="2">Not 
            enough arguments supplied. Did you forget to specify something<br>
            in your call to castEffects?</font></td>
        </tr>
        <tr> 
          <td width="7%">10</td>
          <td width="93%"><font face="Arial, Helvetica, sans-serif" size="2">Unsupported 
            image type.</font></td>
        </tr>
        <tr> 
          <td width="7%">11</td>
          <td width="93%"><font face="Arial, Helvetica, sans-serif" size="2">Not 
            an 8-bit (256-color) bitmap.</font></td>
        </tr>
        <tr> 
          <td width="7%">12</td>
          <td width="93%"><font face="Arial, Helvetica, sans-serif" size="2">Insufficient 
            memory to complete the request.</font></td>
        </tr>
        <tr> 
          <td width="7%">13</td>
          <td width="93%"><font face="Arial, Helvetica, sans-serif" size="2">Not 
            a castEffects cast. This is given when using the release function.<br>
            CastEffects will not release members that were not in the internal 
            cast.</font></td>
        </tr>
        <tr> 
          <td width="7%">14</td>
          <td width="93%"><font face="Arial, Helvetica, sans-serif" size="2">You're 
            already drawing (probably given if you didn't save a drawing<br>
            before starting a new one).</font></td>
        </tr>
        <tr> 
          <td width="7%">15</td>
          <td width="93%"><font face="Arial, Helvetica, sans-serif" size="2">You're 
            not drawing yet (probably you forgot to prepareDrawing, or it<br>
            failed to prepare).</font></td>
        </tr>
        <tr> 
          <td width="7%">16</td>
          <td width="93%"><font face="Arial, Helvetica, sans-serif" size="2">The 
            image is compressed</font></td>
        </tr>
        <tr> 
          <td width="7%">17</td>
          <td width="93%"><font face="Arial, Helvetica, sans-serif" size="2">The 
            bitdepth is less than 8 (under 256 colors)</font></td>
        </tr>
        <tr>
          <td width="7%" height="17">18</td>
          <td width="93%" height="17"><font face="Arial, Helvetica, sans-serif" size="2">Not 
            a 32-bit image with alpha channel (even if Director 5 or 6 says 32-bit, 
            it returns 24-bit)</font></td>
        </tr>
      </table>
      <p><br>
      </p>
      <p>&nbsp;</p>
      <p> 
        <center>
          <br>
        </center>
      </p>
      <p> 
    </td>
  </tr>
  <tr> 
    <td align="LEFT" valign="TOP" colspan="3">&nbsp;</td>
  </tr>
</table>
<h2>
  <center>
  </center>
</h2>
</BODY>
</HTML>
